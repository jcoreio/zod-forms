"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7161],{5055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var o=t(6070),i=t(5710);const s={},r="Reusable Field Components",l={id:"howto/reusable-field-components",title:"Reusable Field Components",description:"Wiring Fields via Props",source:"@site/docs/howto/reusable-field-components.md",sourceDirName:"howto",slug:"/howto/reusable-field-components",permalink:"/zod-forms/docs/howto/reusable-field-components",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/howto/reusable-field-components.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Custom/Conditional Validation",permalink:"/zod-forms/docs/howto/custom-validation"},next:{title:"Show Submit Errors",permalink:"/zod-forms/docs/howto/show-submit-errors"}},d={},a=[{value:"Wiring Fields via Props",id:"wiring-fields-via-props",level:2},{value:"Reusable Form Sections",id:"reusable-form-sections",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"reusable-field-components",children:"Reusable Field Components"}),"\n",(0,o.jsx)(n.h2,{id:"wiring-fields-via-props",children:"Wiring Fields via Props"}),"\n",(0,o.jsxs)(n.p,{children:["To use the same React component to render multiple fields in the same form or in different forms in a\ntypesafe manner, pass ",(0,o.jsx)(n.code,{children:"FieldPath"}),"(s) to your component via props."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, suppose you want to make a reusable ",(0,o.jsx)(n.code,{children:"DateTimeField"})," component that operates on date and time\nfields:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { useField } from '@jcoreio/zod-forms'\n\nconst DateTimeField({\n  fields: { date, time }\n}: {\n  fields: {\n    date: FieldPathForParsedValue<Date | null | undefined, string | null | undefined>,\n    time: FieldPathForParsedValue<Date | null | undefined, string | null | undefined>,\n  }\n}) {\n  const dateProps = useField(fields.date)\n  const timeProps = useField(fields.time)\n\n  return (\n    <div className=\"dateTimeField\">\n      <DateInput {...dateProps} />\n      <TimeInput {...timeProps} />\n    </div>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.p,{children:"Then when rendering the field:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { createZodForm } from '@jcoreio/zod-forms'\nimport z from 'zod'\nimport { invertible } from 'zod-invertible'\n\nconst form = createZodForm({\n  schema: z.object({\n    date: ...,\n    time: ...,\n  }),\n})\n\nfunction MyFormContext() {\n  return (\n    <DateTimeField\n      fields={{ date: form.get('date'), time: form.get('time') }}\n    />\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"reusable-form-sections",children:"Reusable Form Sections"}),"\n",(0,o.jsxs)(n.p,{children:["If you want to render fields in one component that are typically grouped together, like address fields,\nyou can use a single ",(0,o.jsx)(n.code,{children:"FieldPath"})," prop to specify the form section, and get subpaths from it:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { type FieldPathForValue } from \'@jcoreio/zod-forms\'\n\nfunction AddressFields({\n  section,\n}: {\n  section: FieldPathForValue<{\n    line1: string\n    line2: string | null | undefined\n    city: string\n    state: string\n    postalCode: string\n  }>\n}) {\n  return (\n    <>\n      <FormTextField label="Line 1" type="text" field={section.get(\'line1\')} />\n      <FormTextField label="Line 2" type="text" field={section.get(\'line2\')} />\n      <FormTextField label="City" type="text" field={section.get(\'city\')} />\n      <FormTextField\n        label="State"\n        type="text"\n        field={section.get(\'state\')}\n        select\n      >\n        {stateOptions}\n      </FormTextField>\n      <FormTextField\n        label="postalCode"\n        type="text"\n        field={section.get(\'postalCode\')}\n      />\n    </>\n  )\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"And you would use the component like so:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { createZodForm } from '@jcoreio/zod-forms'\nimport z from 'zod'\nimport { invertible } from 'zod-invertible'\n\nconst userProfileForm = createZodForm({\n  schema: z.object({\n    name: z.string(),\n    address: z.object({\n      line1: z.string(),\n      line2: z.string().optional(),\n      city: z.string(),\n      state: z.string(),\n      postalCode: z.string(),\n    }),\n  }),\n})\n\nfunction UserProfileFormContent() {\n  return <>\n    <FormTextField label=\"Name\" type=\"text\" field={userProfileForm.get('name')}>\n    <AddressFields section={userProfileForm.get('address')} />\n  </>\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},5710:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var o=t(758);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);