"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4e3],{8295:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=t(6070),n=t(5710);const r={sidebar_position:2},o="Concepts",i={id:"concepts",title:"Concepts",description:"Values and Raw Values",source:"@site/docs/concepts.md",sourceDirName:".",slug:"/concepts",permalink:"/zod-forms/docs/concepts",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/concepts.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"Requirements and Disclaimers",permalink:"/zod-forms/docs/disclaimers"},next:{title:"How To",permalink:"/zod-forms/docs/category/how-to"}},c={},d=[{value:"Values and Raw Values",id:"values-and-raw-values",level:2},{value:"Path arrays",id:"path-arrays",level:2},{value:"Pathstrings",id:"pathstrings",level:2}];function l(e){const s={code:"code",h1:"h1",h2:"h2",p:"p",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h1,{id:"concepts",children:"Concepts"}),"\n",(0,a.jsx)(s.h2,{id:"values-and-raw-values",children:"Values and Raw Values"}),"\n",(0,a.jsx)(s.p,{children:"Zod schemas parse an input value and may return an output value of a different type."}),"\n",(0,a.jsxs)(s.p,{children:["To support this well, ",(0,a.jsx)(s.code,{children:"@jcoreio/zod-forms"})," stores both input and output values in form state."]}),"\n",(0,a.jsx)(s.p,{children:'The API refers to input values as "raw values" and output values as "values".'}),"\n",(0,a.jsx)(s.h2,{id:"path-arrays",children:"Path arrays"}),"\n",(0,a.jsxs)(s.p,{children:["A path array is an array representation of the path to a value. For example ",(0,a.jsx)(s.code,{children:"['foo', 0, 'bar']"})," represents the value at ",(0,a.jsx)(s.code,{children:"values.foo[0].bar"}),"."]}),"\n",(0,a.jsx)(s.h2,{id:"pathstrings",children:"Pathstrings"}),"\n",(0,a.jsxs)(s.p,{children:["A pathstring is a string containing an idiomatic JS property path expression. For example, ",(0,a.jsx)(s.code,{children:"'foo[0].bar'"})," represents the value at ",(0,a.jsx)(s.code,{children:"values.foo[0].bar"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["You may use strings with escape characters inside brackets like ",(0,a.jsx)(s.code,{children:'["\\"hello world\\""]'}),"."]})]})}function u(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},5710:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var a=t(758);const n={},r=a.createContext(n);function o(e){const s=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(r.Provider,{value:s},e.children)}}}]);