"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3822],{7987:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=t(6070),o=t(5710);const i={sidebar_position:0},s="Quickstart",a={id:"quickstart",title:"Quickstart",description:"Installation",source:"@site/docs/quickstart.md",sourceDirName:".",slug:"/quickstart",permalink:"/zod-forms/docs/quickstart",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/quickstart.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"sidebar",next:{title:"Requirements and Disclaimers",permalink:"/zod-forms/docs/disclaimers"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"Create a form schema",id:"create-a-form-schema",level:2},{value:"Create a form",id:"create-a-form",level:2},{value:"Create a field component",id:"create-a-field-component",level:2},{value:"Create the form component",id:"create-the-form-component",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"quickstart",children:"Quickstart"}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pnpm i @jcoreio/zod-forms\n"})}),"\n",(0,r.jsxs)(n.p,{children:["or if you're using ",(0,r.jsx)(n.code,{children:"npm"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npm i --save @jcoreio/zod-forms\n"})}),"\n",(0,r.jsx)(n.h2,{id:"create-a-form-schema",children:"Create a form schema"}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we'll have a ",(0,r.jsx)(n.code,{children:"url"})," field that must be a valid URL.\nUsing ",(0,r.jsx)(n.code,{children:".trim()"})," ensures that the submitted value will be trimmed.\nThe displayed value will also be trimmed whenever the field is blurred."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import z from 'zod'\n\nconst schema = z.object({\n  url: z.string().trim().url(),\n})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"create-a-form",children:"Create a form"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { createZodForm } from '@jcoreio/zod-form'\n\nconst {\n  FormProvider,\n  // all of the following hooks can also be imported from '@jcoreio/zod-form',\n  // but the ones returned from `createZodForm` are already bound to the schema type\n  useInitialize,\n  useSubmit,\n  useFormStatus,\n  useHtmlField,\n} = createZodForm({ schema })\n"})}),"\n",(0,r.jsx)(n.h2,{id:"create-a-field-component",children:"Create a field component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import { FieldPathForRawValue } from '@jcoreio/zod-form'\n\nfunction FormInput({\n  field,\n  type,\n  ...props\n}: Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type'> & {\n  type: HTMLInputTypeAttribute\n  // This ensures that only fields that accept string, null or undefined\n  // as input can be passed to <FormInput>\n  field: FieldPathForRawValue<string | null | undefined>\n}) {\n  // This hook is designed to provide the smoothest integration with simple <input>s.\n  const { input, meta } = useHtmlField({ field, type })\n\n  const inputRef = React.createRef<HTMLInputElement>()\n  const error = meta.touched || meta.submitFailed ? meta.error : undefined\n  React.useEffect(() => {\n    inputRef.current?.setCustomValidity(error || '')\n  }, [error])\n\n  return (\n    <input\n      {...props}\n      // the `input` props from `useHtmlField` are designed to be spread here\n      {...input}\n      ref={inputRef}\n    />\n  )\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"create-the-form-component",children:"Create the form component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'function MyForm() {\n  return (\n    // <FormProvider> wraps <MyFormContent> in a React Context through which the\n    // hooks and fields access form state\n    <FormProvider>\n      <MyFormContent />\n    </FormProvider>\n  )\n}\n\nfunction MyFormContent() {\n  // This hook initializes the form with the given values.\n  // The second argument is a dependency array -- the form will be reinitialized\n  // if any of the dependencies change, similar to React.useEffect.\n  useInitialize({ values: { url: \'http://localhost\' } }, [])\n\n  // This hook sets your submit handler code, and returns an onSubmit handler to\n  // pass to a <form>\n  const onSubmit = useSubmit({\n    onSubmit: async ({ url }) => {\n      alert(`Submitted! url value: ${url}`)\n    },\n  })\n\n  const { submitting, pristine } = useFormStatus()\n\n  return (\n    <form onSubmit={onSubmit}>\n      <FormInput\n        // this is how we bind <FormInput> to the `url` field\n        field={myForm.get(\'url\')}\n        type="text"\n        placeholder="URL"\n      />\n      <button disabled={pristine || submitting} type="submit">\n        submit\n      </button>\n    </form>\n  )\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},5710:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var r=t(758);const o={},i=r.createContext(o);function s(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);