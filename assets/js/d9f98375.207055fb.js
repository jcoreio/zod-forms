"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[278],{6917:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>i,default:()=>a,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var t=n(6070),r=n(5710);const o={},i="useHtmlField",d={id:"api/useHtmlField",title:"useHtmlField",description:"React custom hook for connecting an `` element to form state.",source:"@site/docs/api/useHtmlField.md",sourceDirName:"api",slug:"/api/useHtmlField",permalink:"/zod-forms/docs/api/useHtmlField",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/useHtmlField.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"useFormValues",permalink:"/zod-forms/docs/api/useFormValues"},next:{title:"useInitialize",permalink:"/zod-forms/docs/api/useInitialize"}},l={},c=[{value:"Options",id:"options",level:2},{value:"Returns <code>UseHtmlFieldProps</code>",id:"returns-usehtmlfieldprops",level:2}];function h(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h1,{id:"usehtmlfield",children:(0,t.jsx)(s.code,{children:"useHtmlField"})}),"\n",(0,t.jsxs)(s.p,{children:["React custom hook for connecting an ",(0,t.jsx)(s.code,{children:"<input>"})," element to form state."]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"import { useHtmlField } from '@jcoreio/zod-forms'\n"})}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-ts",children:"export function useHtmlField({ field, type, normalizeOnBlur }): UseHtmlFieldProps`\n"})}),"\n",(0,t.jsxs)(s.p,{children:["The full method signature extracts the type of the subschema at the given path, and should produce a\nTS error if the path is invalid, doesn't exist in the schema, or its subschema doesn't accept\n",(0,t.jsx)(s.code,{children:"string | number | bigint | boolean | null | undefined"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"options",children:"Options"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"field"})," - a ",(0,t.jsx)(s.a,{href:"/zod-forms/docs/api/FieldPath",children:(0,t.jsx)(s.code,{children:"FieldPath"})}),". If you cast ",(0,t.jsx)(s.code,{children:"useHtmlField"})," to ",(0,t.jsx)(s.a,{href:"/zod-forms/docs/api/types#typedusearrayfield",children:(0,t.jsx)(s.code,{children:"TypedUseArrayField"})}),"\nor use the ",(0,t.jsxs)(s.a,{href:"/zod-forms/docs/api/createZodForm#returns-zodformt",children:[(0,t.jsx)(s.code,{children:"useHtmlField"})," returned from ",(0,t.jsx)(s.code,{children:"createZodForm"})]}),",\n",(0,t.jsx)(s.code,{children:"path"})," may be a ",(0,t.jsx)(s.a,{href:"/zod-forms/docs/concepts#pathstrings",children:"pathstring"})," or ",(0,t.jsx)(s.a,{href:"/zod-forms/docs/concepts#path-arrays",children:"path array"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"type"})," - the ",(0,t.jsx)(s.code,{children:"type"})," attribute for the ",(0,t.jsx)(s.code,{children:"<input>"})," element"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"normalizeOnBlur"})," (optional, defaults to ",(0,t.jsx)(s.code,{children:"true"}),") - whether to normalize the displayed value on blur"]}),"\n"]}),"\n",(0,t.jsxs)(s.h2,{id:"returns-usehtmlfieldprops",children:["Returns ",(0,t.jsx)(s.a,{href:"/zod-forms/docs/api/types#usehtmlfieldprops",children:(0,t.jsx)(s.code,{children:"UseHtmlFieldProps"})})]}),"\n",(0,t.jsx)(s.p,{children:"An object containing the following properties. Causes a rerender when any of these properties changes."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"input"})," - ",(0,t.jsx)(s.a,{href:"/zod-forms/docs/api/types#htmlfieldinputprops",children:(0,t.jsx)(s.code,{children:"HtmlFieldInputProps"})})," to pass to an ",(0,t.jsx)(s.code,{children:"<input>"})," element:","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"name"})," - the name of the field (the ",(0,t.jsx)(s.a,{href:"/zod-forms/docs/concepts#pathstrings",children:"pathstring"})," of the field path)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"type"})," - the ",(0,t.jsx)(s.code,{children:"type"})," from the options"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"value"})," - the value to display"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"checked"})," - include if ",(0,t.jsx)(s.code,{children:"type"})," is ",(0,t.jsx)(s.code,{children:'"checkbox"'})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"onChange"})," - the change event handler"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"onFocus"})," - the focus event handler"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"onBlur"})," - the blur event handler"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"meta"})," - the ",(0,t.jsx)(s.a,{href:"/zod-forms/docs/api/types#usefieldprops",children:(0,t.jsx)(s.code,{children:"UseFieldProps"})})," for the field"]}),"\n"]})]})}function a(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},5710:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>d});var t=n(758);const r={},o=t.createContext(r);function i(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);