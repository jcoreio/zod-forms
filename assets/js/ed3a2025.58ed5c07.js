"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3361],{2464:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>i,default:()=>l,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var n=a(6070),s=a(5710);const r={},i="FieldPath",d={id:"api/FieldPath",title:"FieldPath",description:"Encapsulates a path to a field in a form and the schema at that path.",source:"@site/docs/api/FieldPath.md",sourceDirName:"api",slug:"/api/FieldPath",permalink:"/zod-forms/docs/api/FieldPath",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api/FieldPath.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"API Reference",permalink:"/zod-forms/docs/api/"},next:{title:"createZodForm",permalink:"/zod-forms/docs/api/createZodForm"}},h={},c=[{value:"<code>path: (string | number)[]</code>",id:"path-string--number",level:3},{value:"<code>pathstring: string</code>",id:"pathstring-string",level:3},{value:"<code>schema: T</code>",id:"schema-t",level:3},{value:"<code>get(path): FieldPath</code>",id:"getpath-fieldpath",level:3}];function o(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"fieldpath",children:(0,n.jsx)(t.code,{children:"FieldPath"})}),"\n",(0,n.jsx)(t.p,{children:"Encapsulates a path to a field in a form and the schema at that path."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import { FieldPath } from '@jcoreio/zod-form'\n"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"class FieldPath<T extends z.ZodTypeAny = z.ZodTypeAny>\n"})}),"\n",(0,n.jsx)(t.h3,{id:"path-string--number",children:(0,n.jsx)(t.code,{children:"path: (string | number)[]"})}),"\n",(0,n.jsx)(t.p,{children:"The array representation of this path"}),"\n",(0,n.jsx)(t.h3,{id:"pathstring-string",children:(0,n.jsx)(t.code,{children:"pathstring: string"})}),"\n",(0,n.jsx)(t.p,{children:"The string representation of this path"}),"\n",(0,n.jsx)(t.h3,{id:"schema-t",children:(0,n.jsx)(t.code,{children:"schema: T"})}),"\n",(0,n.jsx)(t.p,{children:"The Zod schema at this path"}),"\n",(0,n.jsx)(t.h3,{id:"getpath-fieldpath",children:(0,n.jsx)(t.code,{children:"get(path): FieldPath"})}),"\n",(0,n.jsxs)(t.p,{children:["Gets a subpath under this ",(0,n.jsx)(t.code,{children:"FieldPath"}),". ",(0,n.jsx)(t.code,{children:"path"})," may either be a ",(0,n.jsx)(t.a,{href:"/zod-forms/docs/concepts#pathstrings",children:"pathstring"})," or a ",(0,n.jsx)(t.a,{href:"/zod-forms/docs/concepts#path-arrays",children:"path array"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The full method signature (not shown here) is fully typed and extracts the type of the subschema at\nthe given path, and should produce a TS error if the path is invalid or doesn't exist in ",(0,n.jsx)(t.a,{href:"#schema-t",children:(0,n.jsx)(t.code,{children:"schema"})}),"."]})]})}function l(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(o,{...e})}):o(e)}},5710:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>d});var n=a(758);const s={},r=n.createContext(s);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);