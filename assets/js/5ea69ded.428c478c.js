"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3216],{9869:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var a=i(6070),t=i(5710);const o={},s="Custom/Conditional Validation",d={id:"howto/custom-validation",title:"Custom/Conditional Validation",description:"In your form schema, use .refine and .superRefine",source:"@site/docs/howto/custom-validation.md",sourceDirName:"howto",slug:"/howto/custom-validation",permalink:"/zod-forms/docs/howto/custom-validation",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/howto/custom-validation.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"How To",permalink:"/zod-forms/docs/category/how-to"},next:{title:"Reusable Field Components",permalink:"/zod-forms/docs/howto/reusable-field-components"}},r={},l=[{value:"Validating a Single Field",id:"validating-a-single-field",level:2},{value:"Comparing Fields",id:"comparing-fields",level:2},{value:"Conditional Validation",id:"conditional-validation",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"customconditional-validation",children:"Custom/Conditional Validation"}),"\n",(0,a.jsxs)(n.p,{children:["In your form schema, use ",(0,a.jsx)(n.a,{href:"https://zod.dev/?id=refine",children:(0,a.jsx)(n.code,{children:".refine"})})," and ",(0,a.jsx)(n.a,{href:"https://zod.dev/?id=superrefine",children:(0,a.jsx)(n.code,{children:".superRefine"})}),"\nfor field validation."]}),"\n",(0,a.jsx)(n.h2,{id:"validating-a-single-field",children:"Validating a Single Field"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://zod.dev/?id=refine",children:(0,a.jsx)(n.code,{children:".refine"})})," is convenient for single-field validation:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const schema = z.object({\n  serverUrl: z\n    .string()\n    .url()\n    .optional()\n    .refine((url) => {\n      try {\n        return url == null || new URL(url).protocol === 'mqtts'\n      } catch {\n        return false\n      }\n    }, 'must be a valid mqtts url'),\n})\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"error message example",src:i(1285).A+"",width:"442",height:"200"})}),"\n",(0,a.jsx)(n.h2,{id:"comparing-fields",children:"Comparing Fields"}),"\n",(0,a.jsxs)(n.p,{children:["To validate one field against another, use ",(0,a.jsx)(n.a,{href:"/zod-forms/docs/api/conditionalValidate",children:(0,a.jsx)(n.code,{children:"conditionalValidate"})}),".\nIt is similar to ",(0,a.jsx)(n.code,{children:".superRefine"}),", but ensures that the refinements are checked even if unrelated fields\nfailed to parse."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { conditionalValidate } from '@jcoreio/zod-forms'\n\nconst schema = conditionalValidate(\n  z.object({\n    foo: z.string(),\n    min: z.number().finite(),\n    max: z.number().finite(),\n  })\n).conditionalRefine(\n  // Pick the fields the refinement depends on here\n  (s) => s.pick({ min: true, max: true }),\n  // This refinement will only be checked if min and max are successfully parsed\n  ({ min, max }) => min <= max,\n  [\n    { path: ['min'], message: 'must be <= max' },\n    { path: ['max'], message: 'must be >= min' },\n  ]\n)\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"error message example",src:i(485).A+"",width:"828",height:"208"})}),"\n",(0,a.jsx)(n.h2,{id:"conditional-validation",children:"Conditional Validation"}),"\n",(0,a.jsxs)(n.p,{children:["To do conditional validation, use ",(0,a.jsx)(n.a,{href:"/zod-forms/docs/api/conditionalValidate",children:(0,a.jsx)(n.code,{children:"conditionalValidate"})}),".\nIt is similar to ",(0,a.jsx)(n.code,{children:".superRefine"}),", but ensures that the refinements are checked even if unrelated fields\nfailed to parse."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"import { conditionalValidate } from '@jcoreio/zod-forms'\n\nconst schema = conditionalValidate(\n  z.object({\n    dataType: z.enum(['string', 'number']),\n    displayPrecision: z.number().finite().optional(),\n  })\n).conditionalRefine(\n  (s) => s.pick({ dataType: true, displayPrecision: true }),\n  ({ dataType, displayPrecision }) =>\n    dataType !== 'number' || displayPrecision != null,\n  { path: ['displayPrecision'], message: 'Required when dataType is number' }\n)\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.img,{alt:"error message example",src:i(3498).A+"",width:"918",height:"204"}),"\n",(0,a.jsx)(n.img,{alt:"inactive validation example",src:i(3638).A+"",width:"852",height:"180"})]})]})}function m(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},3638:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/conditional-validation-inactive-716ebfd57e6565de48feeb619e4ba2db.png"},3498:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/conditional-validation-d74bb1ffe68099cf0b1841011112449f.png"},485:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/min-max-validation-808583d4572bbaeaf151dc4237706c1a.png"},1285:(e,n,i)=>{i.d(n,{A:()=>a});const a=i.p+"assets/images/single-field-validation-912c27b57ae83350820c5f9278455a52.png"},5710:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var a=i(758);const t={},o=a.createContext(t);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);